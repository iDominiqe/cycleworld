// API –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
const API_BASE = 'https://api.warframestat.us/';

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API
async function fetchAPIData() {
    updateSyncStatus(true);
    
    try {
        const platform = currentPlatform;
        console.log(`Fetching data for platform: ${platform}`);
        
        const endpoints = [
            'earthCycle',
            'cetusCycle', 
            'vallisCycle',
            'cambionCycle',
            'duviriCycle',
            'zarimanCycle',
            'voidTrader'
        ];
        
        const requests = endpoints.map(endpoint => 
            fetch(`${API_BASE}${platform}/${endpoint}`)
                .then(res => {
                    if (!res.ok) {
                        throw new Error(`HTTP error! status: ${res.status}`);
                    }
                    return res.json();
                })
                .catch(error => {
                    console.error(`Error fetching ${endpoint}:`, error);
                    return null;
                })
        );
        
        const results = await Promise.all(requests);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        const validResults = results.filter(result => result !== null);
        if (validResults.length === 0) {
            throw new Error('All API requests failed');
        }
        
        const [earth, cetus, vallis, cambion, duviri, zariman, baro] = results;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
        lastServerTime = Date.now();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∏—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        if (earth) {
            processWorldData('earth', earth, {
                isDay: earth.isDay,
                expiry: earth.expiry,
                totalTime: 4 * 60 * 60, // 4 —á–∞—Å–∞
                dayStatus: '‚òÄÔ∏è Day',
                nightStatus: 'üåô Night',
                dayOrbiter: '‚òÄÔ∏è',
                nightOrbiter: 'üåô'
            });
        }
        
        if (cetus) {
            processWorldData('cetus', cetus, {
                isDay: cetus.isDay,
                expiry: cetus.expiry,
                totalTime: 2.5 * 60 * 60, // 2.5 —á–∞—Å–∞
                dayStatus: '‚òÄÔ∏è Day',
                nightStatus: 'üåô Night',
                dayOrbiter: '‚òÄÔ∏è',
                nightOrbiter: 'üåô'
            });
        }
        
        if (vallis) {
            processWorldData('vallis', vallis, {
                isDay: vallis.isWarm,
                expiry: vallis.expiry,
                totalTime: 4 * 60 * 60, // 4 —á–∞—Å–∞
                dayStatus: 'üî• Warm',
                nightStatus: '‚ùÑÔ∏è Cold',
                dayOrbiter: 'üî•',
                nightOrbiter: '‚ùÑÔ∏è'
            });
        }
        
        if (cambion) {
            processWorldData('cambion', cambion, {
                isDay: cambion.active === 'fass',
                expiry: cambion.expiry,
                totalTime: 3 * 60 * 60, // 3 —á–∞—Å–∞
                dayStatus: 'üåû Fass',
                nightStatus: 'üåö Vome',
                dayOrbiter: 'üåû',
                nightOrbiter: 'üåö'
            });
        }
        
        if (duviri) {
            processWorldData('duviri', duviri, {
                state: duviri.state,
                expiry: duviri.expiry,
                totalTime: 1 * 60 * 60, // 1 —á–∞—Å
                statusMap: {
                    'joy': 'üòä Joy',
                    'sorrow': 'üòî Sorrow', 
                    'fear': 'üò± Fear',
                    'anger': 'üò† Anger',
                    'envy': 'üòí Envy'
                },
                orbiterMap: {
                    'joy': 'üòä',
                    'sorrow': 'üòî',
                    'fear': 'üò±',
                    'anger': 'üò†',
                    'envy': 'üòí'
                }
            });
        }
        
        if (zariman) {
            processWorldData('zariman', zariman, {
                state: zariman.state,
                expiry: zariman.expiry,
                totalTime: 3 * 60 * 60, // 3 —á–∞—Å–∞
                statusMap: {
                    'corpus': 'ü§ñ Corpus',
                    'grineer': 'üí• Grineer'
                },
                orbiterMap: {
                    'corpus': 'ü§ñ',
                    'grineer': 'üí•'
                }
            });
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Baro
        if (baro) {
            const now = Date.now();
            const activationTime = new Date(baro.activation).getTime();
            const expiryTime = new Date(baro.expiry).getTime();
            
            baroData = {
                isHere: baro.active,
                timeLeft: Math.floor(baro.active ? 
                    Math.max(0, (expiryTime - now) / 1000) : 
                    Math.max(0, (activationTime - now) / 1000)),
                location: baro.active ? baro.location : '',
                inventory: baro.active ? (baro.inventory || []).map(item => item.item) : []
            };
            
            updateBaroDisplay(baroData);
        }
        
        updateLastUpdateTime();
        updateSyncStatus(false);
        console.log('Data updated successfully');
        
    } catch (error) {
        console.error('Error fetching API data:', error);
        updateSyncStatus(false);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showErrorMessage(error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function showErrorMessage(message) {
    const worlds = ['earth', 'cetus', 'vallis', 'cambion', 'duviri', 'zariman'];
    worlds.forEach(world => {
        const statusElement = document.getElementById(`${world}-status`);
        if (statusElement) {
            statusElement.textContent = `‚ùå ${translations[currentLang].error}`;
            statusElement.style.color = '#ff6b6b';
        }
    });
    
    const baroStatus = document.getElementById('baro-status');
    if (baroStatus) {
        baroStatus.textContent = `‚ùå ${translations[currentLang].error}`;
        baroStatus.style.color = '#ff6b6b';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const syncStatus = document.getElementById('sync-status');
    if (syncStatus) {
        syncStatus.innerHTML = `<i class="fas fa-exclamation-triangle"></i> <span>API Error</span>`;
        syncStatus.style.color = '#ff6b6b';
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞
function processWorldData(world, data, config) {
    const now = Date.now();
    const expiryTime = new Date(data.expiry).getTime();
    const timeLeft = Math.floor(Math.max(0, (expiryTime - now) / 1000));
    
    let status, orbiter, currentState;
    
    if (config.state) {
        // –î–ª—è –º–∏—Ä–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (Duviri, Zariman)
        const stateKey = data.state.toLowerCase();
        status = config.statusMap[stateKey] || data.state;
        orbiter = config.orbiterMap[stateKey] || '‚ùì';
        currentState = stateKey;
    } else {
        // –î–ª—è –º–∏—Ä–æ–≤ —Å –¥–µ–Ω—å/–Ω–æ—á—å
        status = config.isDay ? config.dayStatus : config.nightStatus;
        orbiter = config.isDay ? config.dayOrbiter : config.nightOrbiter;
        currentState = config.isDay ? 'day' : 'night';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if (previousStates[world] && previousStates[world] !== currentState) {
        animateCycleChange(world);
    }
    previousStates[world] = currentState;
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π
    if (currentLang === 'ru') {
        status = status
            .replace('Day', '–î–µ–Ω—å')
            .replace('Night', '–ù–æ—á—å')
            .replace('Warm', '–¢–µ–ø–ª–æ')
            .replace('Cold', '–•–æ–ª–æ–¥')
            .replace('Fass', '–§–∞—Å—Å')
            .replace('Vome', '–í–æ–º')
            .replace('Joy', '–†–∞–¥–æ—Å—Ç—å')
            .replace('Sorrow', '–ü–µ—á–∞–ª—å')
            .replace('Anger', '–ì–Ω–µ–≤')
            .replace('Fear', '–°—Ç—Ä–∞—Ö')
            .replace('Envy', '–ó–∞–≤–∏—Å—Ç—å')
            .replace('Corpus', '–ö–æ—Ä–ø—É—Å')
            .replace('Grineer', '–ì—Ä–∏–Ω–∏—Ä');
    }
    
    worldData[world] = {
        status: status,
        timeLeft: timeLeft,
        totalTime: config.totalTime,
        orbiter: orbiter
    };
    
    updateWorldDisplay(world, worldData[world]);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
async function testAPI() {
    try {
        const response = await fetch('https://api.warframestat.us/pc/earthCycle');
        const data = await response.json();
        console.log('API Test Response:', data);
        return data;
    } catch (error) {
        console.error('API Test Failed:', error);
        return null;
    }
}
